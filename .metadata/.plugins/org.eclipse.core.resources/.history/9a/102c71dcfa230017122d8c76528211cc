
/* Tugas Pemrograman CIS
 * Aplikasi kalkulator untuk enkripsi & dekripsi plaintext menggunakan mode CTR. 
 * 
 * @author 	1306397904 - Desi Ratna Mukti & 
 * 			1306464266 - Abidzar Gifari
 * 
 * */

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.io.File;
import java.io.IOException;
import java.security.SecureRandom;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.file.Path;

public class Ctr {

	public static final String AB = "0123456789ABCDEF";
	public static SecureRandom rnd = new SecureRandom();
	public static ArrayList<byte[]> blocks = new ArrayList<byte[]>();
	public static int n;
	public static int x;
	public static int y;
	public static String rs = "";
	public static byte[] plaintext;
	public static byte[] key;
	public static byte[] nonce;
	public static byte[] result;
	public static String ciphertext = "";

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		key = new byte[AES.BLOCK_SIZE]; /* 128-bit AES key */
		nonce = new byte[AES.BLOCK_SIZE];
		Scanner input = new Scanner(System.in);
	
		// baca input plaintext dan ubah jadi byte
		Path path = Paths.get("input.txt");
		plaintext = Files.readAllBytes(path);

		// baca input key dan ubah jadi byte
		String k = input.nextLine();
		key = Util.hex2byte(k);
		//System.out.println(key.length);
		
		// generate counter (nonce) dan ubah jadi byte
		rs = randomString(32);
		nonce = Util.hex2byte(rs);
		System.out.println(rs);
		
		for(int w=0; w<nonce.length; w++){
			System.out.print(nonce[w]);
		}
		
		// lakukan enkripsi -> print
		System.out.println("");
		System.out.println(enkripsi(plaintext, key));
		
	}
		
	public static String enkripsi(byte[] input, byte[] inKey){
		n = plaintext.length;
		x = n / 16;
		y = n % 16;
		
		// jika panjang plaintext bukan kelipatan 16, buat block baru
		if (y != 0) {
			x++;
		}
		
		// memotong plaintext menjadi blocks dengan panjang 16byte
		for(int p=0; p < x; p++){
			if(plaintext.length > 16){
				byte[] newArray = Arrays.copyOfRange(plaintext, 0, 15);
				blocks.add(newArray);
				plaintext = Arrays.copyOfRange(plaintext, 16, n-1);
			} else {	
				byte[] newArray = Arrays.copyOfRange(plaintext, 0, n-1);
				blocks.add(newArray);
			}	
		}
		
		// lakukan enkripsi AES terhadap setiap block
		for (int j = 0; j < x; j++) {
			// enkripsi key dan nonce menggunakan AES
			System.out.println(j);
			AES testAES;
			testAES = new AES();
			testAES.setKey(key);
			result = testAES.encrypt(nonce);
			
			// increment nonce pada 16byte block berikutnya
			nonce[15] = nonce[15]++;
			
			// lakukan operasi XOR antara current block dengan hasil enkripsi
			byte[] encrypted = xor(blocks.get(j), result);
			String temp = Util.toHEX(encrypted);
			ciphertext = String.join("", temp);
		} 
		return ciphertext;
	}
	
	public static String dekripsi(String input, String inKey, String output){
		String decryptedtext = "";
		return decryptedtext;
	}

	/*
	 * Method untuk melakukan operasi XOR pada setiap bit
	 * 
	 * @param byte array1 dan byte array2
	 * 
	 */
	public static byte[] xor(byte[] input1, byte[] input2) {
		byte[] temp = new byte[input1.length];
		for (int i = 0; i < input1.length; i++) {
			byte xoredByte = (byte) ((int) input1[i] ^ (int) input2[i]);
			temp[i] = xoredByte;
		}
		return temp;
	}

	/*
	 * Method untuk membuat pseudorandom string untuk nonce
	 * 
	 * @param panjang string yang ingin dibangun
	 * 
	 */
	public static String randomString(int len) {
		StringBuilder sb = new StringBuilder(len);
		for (int i = 0; i < len; i++)
			sb.append(AB.charAt(rnd.nextInt(AB.length())));
		return sb.toString();
	}
}
